todo Add comments?
todo Make run in browser
todo Add print or tracer type of intermediate element. debugger?
swarmNode
 root
 description A Tree Language for unit testing.
 inScope hashbangNode arrangeTestSubjectNode testBlockNode
 catchAllNodeType errorNode
 javascript
  getCommandParent(testSubject) { return testSubject }
  getTestSetupNode() {
    return this.getChildInstancesOfNodeTypeId("arrangeTestSubjectNode")[0]
  }
  async execute(filepath) {
    const tests = this.getTestsToRun()
    await Promise.all(tests.map(test => test.execute(filepath)))
    return `${tests.length} tests started.`
  }
  getTestsToRun() {
    const solos = this.getChildInstancesOfNodeTypeId("testOnlyNode")
    return solos.length ? solos : this.getChildInstancesOfNodeTypeId("testBlockNode").filter(test => !(test.doesExtend("skipTestNode")))
  }
anyFirstCell
anyCell
 highlightScope string
arrangeCell
 highlightScope constant.language
assertCell
 highlightScope keyword.operator
commandCell
 highlightScope variable.function
controlCell
 highlightScope keyword.control
extraCell
 highlightScope invalid
filepathCell
 highlightScope string
hashBangCell
 highlightScope comment
intCell
 regex \-?[0-9]+
 highlightScope constant.numeric.integer
parameterCell
 highlightScope variable.parameter
todoCell
 highlightScope comment
typeOfOptionCell
 description The 6 possible results for Javascript's typeof.
 highlightScope constant.language
 enum object boolean function number string undefined
abstractAssertionNode
 firstCellType assertCell
 abstract
 javascript
  async execute(testSubject) {
    const finalParts = abstractAssertion._getMethodFromDotPath(testSubject, this.getWord(1))
    const subject = finalParts[0]
    const command = finalParts[1]
    const actual = subject[command]()
    const actualAsString = this.parseActual(actual).toString()
    const expected = this.getExpected()
    const isPassed = this.getTestResult(actualAsString, expected, this.getLine())
    if (!isPassed) {
      this.printFailureMessage(actual)
      debugger
    }
  }
  printFailureMessage() {
    const line = this.getLine()
    this.setLine(`FAILED:${line}`)
    this.setLine(line)
    console.log(this.getStackString())
    const lineNumber = this.getPoint()
    console.log(`Line number ${lineNumber.y}`)
  }
  equal(actual, expected, message) {
    this.getParent().getEqualFn()(actual, expected, message)
  }
  getTestResult(actualAsString, expected, message) {
    this.equal(actualAsString, expected, message)
    return actualAsString === expected
  }
  parseActual(actual) {
    return actual
  }
  executeSync(result) {
    const expected = this.getSyncExpected()
    const actual = this.parseActual(result)
    const actualIsUndefined = actual === undefined
    const actualAsString = actualIsUndefined ? "undefined" : actual.toString()
    const isPassed = this.getTestResult(actualAsString, expected, this.getLine())
    if (!isPassed) {
      this.printFailureMessage(result)
      debugger
    }
  }
  getExpected() {
    return this.getWordsFrom(2).join(" ")
  }
  getSyncExpected() {
    return this.getContent()
  }
  static _getMethodFromDotPath(context, str) {
    const methodParts = str.split(".")
    while (methodParts.length > 1) {
      context = context[methodParts.shift()]()
    }
    const final = methodParts.shift()
    return [context, final]
  }
terminalNode
 firstCellType arrangeCell
 abstract
testBlockNode
 catchAllCellType anyCell
 javascript
  getTestSetupNode() {
    return this.getNode("arrangeTestSubject") || this.getParent().getTestSetupNode()
  }
  isAsync() {
    return this.getTestSetupNode().has("async")
  }
  setEqualMethod(equal) {
    this._equal = equal
    return this
  }
  getTestBlock() { return this }
  getEqualFn() {
    return this._equal
  }
  async _executeNode(programFilepath) {
    const testSubject = this.getTestSetupNode().getTestSubject(programFilepath)
    const isAsync = this.isAsync()
    const executeMethod = isAsync ? "execute" : "executeSync"
    const tap = require("tap") // todo: make work with browser
    return new Promise((resolve, reject) => {
      const testName = this.getLine()
      tap.test(testName, async childTest => {
        this.setEqualMethod(childTest.equal)
        const promises = this.map(async child => {
          const result = await child[executeMethod](testSubject)
          return isAsync ? Promise.resolve(result) : result
        })
        await Promise.all(promises)
        childTest.end()
        resolve()
      })
    })
  }
  async _executeBrowser() {
    const testSubject = this.getTestSetupNode().getTestSubject()
    const isAsync = this.isAsync()
    const executeMethod = isAsync ? "execute" : "executeSync"
    const testName = this.getLine()
    console.log("testing: " + testName)
    this.setEqualMethod((actual, expected, message) => {
      if (actual !== expected) console.log("fail")
      else console.log("pass")
    })
    const promises = this.map(child => {
      const result = child[executeMethod](testSubject)
      return isAsync ? Promise.resolve(result) : result
    })
    await Promise.all(promises)
  }
  async execute(programFilepath) {
    const res = await this.isNodeJs() ? this._executeNode(programFilepath) : this._executeBrowser()
    return res
  }
 inScope arrangeTestSubjectNode
 catchAllNodeType commandNode
 firstCellType controlCell
 abstract
hashbangNode
 match #!
 description Standard bash hashbang line.
 cells hashBangCell
 catchAllCellType hashBangCell
 firstCellType hashBangCell
arrangeTestSubjectNode
 javascript
  getTestSubject(programFilepath) {
    const requiredClass = this._getRequiredClass(programFilepath)
    const constructorArgNode = this.getChildInstancesOfNodeTypeId("constructWithBlockStringNode")[0]
    const param = constructorArgNode ? constructorArgNode.childrenToString() : undefined
    return this.has("static") ? requiredClass : new requiredClass(param)
   }
  _getRequiredClass(programFilepath) {
    let requiredClass =
      this.get("require") ||
      this.getRootNode()
        .getNode("arrangeTestSubject")
        .get("require")
    const requiredClassParts = requiredClass.split(" ") // Allows for ./ExportsClasses.js ChildClass
    requiredClass = requiredClassParts[0]
    let theClass
    if (this.isNodeJs()) theClass = require(jtree.Utils.resolvePath(requiredClass, programFilepath))
    else theClass = window[jtree.Utils.getClassNameFromFilePath(requiredClass)]
    if (requiredClassParts[1]) theClass = jtree.Utils.resolveProperty(theClass, requiredClassParts[1])
    if (!theClass)
      throw new Error(`Required class '${requiredClass}${requiredClassParts[1] ? " (" + requiredClassParts[1] + ")" : ""}' not found for ${this.toString()}`)
    return theClass
   }
  executeSync() {}
 firstCellType arrangeCell
 inScope asyncNode requireNode staticNode constructWithBlockStringNode todoNode
asyncNode
 description Set this in setup to test async methods.
 extends terminalNode
blockStringIsNode
 description When your expected value is a multiline string.
 catchAllNodeType textBlockNode
 javascript
  getExpected() { return this.childrenToString() }
  getSyncExpected() { return this.childrenToString() }
 extends abstractAssertionNode
abstractCommandArgNode
 abstract
 javascript
  executeSync() {}
blockStringParamNode
 firstCellType parameterCell
 description Pass in a multiline string as a command arg. #todo: rename
 extends abstractCommandArgNode
 catchAllNodeType textBlockNode
commandNode
 javascript
  getTestBlock() {
    return this.getParent()
  }
  getEqualFn() {
    return this.getTestBlock().getEqualFn()
  }
  _getArgs() {
    const argNodes = this.getChildInstancesOfNodeTypeId("abstractCommandArgNode")
    if (argNodes.length) return argNodes.map(arg => arg.childrenToString())
    return this.getWordsFrom(1)
  }
  _executeSwarmCommand(testSubject) {
    const commandName = this.getFirstWord()
    const commandParent = this.getRootNode().getCommandParent(testSubject) // todo: hacky.
    const commandFn = commandParent[commandName]
    if (!commandFn) throw new Error(`No function "${commandName}" on "${commandParent.constructor.name}`)
    return commandFn.apply(commandParent, this._getArgs())
  }
  async execute(testSubject) {
    await this._executeSwarmCommand(testSubject)
    return super.execute(testSubject) // note: this might not work with closure compiler b/c of bug #2652
  }
  executeSync(testSubject) {
    const newTestSubject = this._executeSwarmCommand(testSubject)
    return this.map(child => child.executeSync(newTestSubject))
  }
 description Input is an object, and calls some method with an optional array of string args.
 catchAllCellType anyCell
 catchAllNodeType commandNode
 firstCellType commandCell
 inScope blockStringParamNode abstractAssertionNode
constructWithBlockStringNode
 javascript
  executeSync() {}
 description Pass in a multiline string to setup constructor. #todo: rename
 catchAllNodeType textBlockNode
 firstCellType arrangeCell
errorNode
 baseNodeType errorNode
lengthIsNode
 description Intake is an array, and checks if the length of array matches expected.
 cells intCell
 javascript
  parseActual(actual) { return actual.length }
  printFailureMessage(actual) {
    super.printFailureMessage()
    console.log(actual.join("\n"))
  }
 extends abstractAssertionNode
requireNode
 match require
 cells filepathCell
 catchAllCellType anyCell
 extends terminalNode
staticNode
 match static
 description Add this to setup node to import class directly without initiating it, for static method testing.
 extends terminalNode
stringExcludesNode
 description Converts the input to string and ensure the string does NOT contain the provided string
 catchAllCellType anyCell
 javascript
   getTestResult(actualAsString, expected, message) {
    const result = !actualAsString.includes(expected)
    if (!result) {
      const index = actualAsString.indexOf(expected)
      const start = Math.max(0, index - 50)
      message += ` Found ${expected} in: ` + actualAsString.substr(start, index + 50 + expected.length)
    }
    this.equal(result, true, message)
    return result
  }
 extends abstractAssertionNode
stringIncludesNode
 catchAllCellType anyCell
 description Converts the input to string and see if the string contains the provided string
 javascript
   getTestResult(actualAsString, expected, message) {
    const result = actualAsString.includes(expected)
    this.equal(result, true, message)
    return result
  }
 extends abstractAssertionNode
stringIsNode
 description Intake is anything with a toString method, and compares that to provided expected value.
 catchAllCellType anyCell
 extends abstractAssertionNode
testNode
 description Basic test block.
 extends testBlockNode
testOnlyNode
 description If set, only this test block will be run.
 extends testBlockNode
skipTestNode
 description If you want to skip running a test.
 javascript
  async execute() { console.log(`Skipped test ${this.getLine()}`) }
 extends testBlockNode
textBlockNode
 firstCellType anyCell
 catchAllCellType anyCell
 catchAllNodeType textBlockNode
todoNode
 description Todos let you add notes about what is coming in the future in the source code. They are like comments in other languages except should only be used for todos.
 catchAllCellType todoCell
 firstCellType todoCell
 catchAllNodeType todoNode
typeIsNode
 description Assert result is one of Javascript's 6 typeof types.
 cells typeOfOptionCell
 javascript
  parseActual(actual) { return typeof actual }
 extends abstractAssertionNode